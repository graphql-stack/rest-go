basePath: /v1
definitions:
  common.CommentInput:
    properties:
      content:
        type: string
      post_id:
        type: string
    required:
    - content
    - post_id
    type: object
  common.ErrResp:
    properties:
      code:
        type: string
      errors:
        type: object
      message:
        type: string
    type: object
  common.LoginForm:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  common.PostInput:
    properties:
      content:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  common.RegisterForm:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - name
    - email
    - password
    type: object
  model.Comment:
    properties:
      author_id:
        type: string
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: string
      post_id:
        type: string
      updatedAt:
        type: string
    type: object
  model.Post:
    properties:
      author_id:
        type: string
      comments:
        items:
          $ref: '#/definitions/model.Comment'
        type: array
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    type: object
  model.Token:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: string
      token:
        type: string
      updatedAt:
        type: string
      user_id:
        type: string
    type: object
  model.User:
    properties:
      avator:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is our backend api server.
  license:
    name: MIT
  title: Backend API
  version: "0.1"
paths:
  /comments:
    post:
      consumes:
      - application/json
      description: Create a new comment
      parameters:
      - description: Post comment
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/common.CommentInput'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Comment'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrResp'
            type: object
        "500":
          description: StatusInternalServerError
      security:
      - ApiKeyAuth: []
      summary: Create a new comment
  /login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: Login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/common.LoginForm'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Token'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrResp'
            type: object
        "500":
          description: StatusInternalServerError
      summary: Login a user
  /me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ErrResp'
            type: object
        "500":
          description: StatusInternalServerError
      security:
      - ApiKeyAuth: []
      summary: Me message
  /posts:
    get:
      consumes:
      - application/json
      parameters:
      - default: 100
        description: limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Post'
            type: array
        "500":
          description: StatusInternalServerError
      summary: Posts pagination query all
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Post content
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/common.PostInput'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Post'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrResp'
            type: object
        "500":
          description: StatusInternalServerError
      security:
      - ApiKeyAuth: []
      summary: Register a new user
  /posts/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
            type: object
        "500":
          description: StatusInternalServerError
      summary: Posts query by id
  /posts/{id}/comments:
    get:
      consumes:
      - application/json
      description: Get a post's comments
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Comment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrResp'
            type: object
        "500":
          description: StatusInternalServerError
      security:
      - ApiKeyAuth: []
      summary: Get a post's comments
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/common.RegisterForm'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Token'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrResp'
            type: object
        "500":
          description: StatusInternalServerError
      summary: Register a new user
  /users_batch:
    get:
      consumes:
      - application/json
      parameters:
      - description: search by ids
        in: query
        name: ids
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: StatusInternalServerError
      summary: Posts pagination query all
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
